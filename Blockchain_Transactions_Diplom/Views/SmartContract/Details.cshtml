@model SmartContract
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager

<h1>@Model.Exercise.Name </h1>
<h2>@Model.ContractValue</h2>
<h3>@Model.Exercise.Description</h3>
<a asp-action="DownloadFile" asp-controller="Exercise" asp-route-id="@Model.IdExercise">Download File</a>


@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);
    <a asp-action="AcceptSmartContract" asp-controller="SmartContract" asp-route-idSmartContract="@Model.ContractId" asp-route-userPublicKey="@user.Publickey">Accept Contract</a>
    if(Model.PublicKeyExecutor == user.Publickey)
    {
        <a asp-action="ExecutorSendAnsewr" asp-controller="SmartContract" asp-route-idExercise="@Model.IdExercise">Send Answer</a>
        <p>Your Answer: @Model.Exercise.AnswerExecutor</p>
        
        <p>Creator Answer:  @Model.Exercise.AnswerCreator</p>
    }
    if (Model.PublicKeyCreator == user.Publickey)
    {
        <p>Executor Answer: @Model.Exercise.AnswerExecutor</p>

        <p>Your Answer:  @Model.Exercise.AnswerCreator</p>
        if(Model.Exercise.FileAnswer != null)
        {
            <a asp-action="DownloadFileAnswer" asp-controller="Exercise" asp-route-id="@Model.IdExercise">Get File from Executor</a>

        }
        <a asp-action="SendReplyToExecutor" asp-controller="SmartContract" asp-route-idExericse="@Model.IdExercise">Send reply to Executor</a>
        <a asp-action="PayForWork" asp-ciontroller="SmartContract" asp-route-idSmartContract="@Model.ContractId">Pay for work</a>
    }

}
