@using Blockchain_Transactions_Diplom.ViewModels;
@model SmartContractCreateViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager

<main class="create-exercise-container d-flex align-items-center justify-content-center">
    @if (SignInManager.IsSignedIn(User))
    {
        var user = await UserManager.GetUserAsync(User);
        if(user != null)
        {
            <form class="form-create w-50 p-4 bg-light  rounded shadow" asp-controller="SmartContract" asp-action="CreateSmartContract" method="post" enctype="multipart/form-data">
                <h1 class="h3 mb-3 fw-normal text-center">Create a New Exercise</h1>
                <input asp-for="IdExercise" type="text" value="@Model.IdExercise" readonly hidden name="IdExercise">
                <input asp-for="UserId" type="text" value="@user.Id" readonly hidden name="UserId">
                <input asp-for="PublicKeyCreator" type="text" value="@user.Publickey" readonly hidden name="PublicKeyCreator">

                <div class="mb-4 form-floating">
                    <input id="contractValue" type="text" name="ContractValue" class="form-control contractValue" oninput="calculateCommission()" placeholder="ContractValue" required>
                    <label for="contractValue">Contract Value</label>

                </div>

                <div class="mb-4 form-floating">
                    <label asp-for="ContractValue" class="form-label">Commission (10%) Therefore the executor will receive</label>
                    <input asp-for="ContractValue" name="CommissionValue" type="number" class="form-control" readonly>
                </div>

                <button class="btn btn-success w-100 py-2" type="submit">Confirm!</button>
            </form>
        }
       
    }
</main>
<script>
    function calculateCommission() {
        var contractValue = parseFloat(document.querySelector('input[name="ContractValue"]').value);
        var commissionValue = contractValue - contractValue * 0.10;

        document.querySelector('input[name="CommissionValue"]').value = commissionValue.toFixed(0);
    }
</script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    .create-exercise-container {
        min-height: calc(100vh - 200px);
        padding-top: 60px;
        padding-bottom: 60px;
    }

    .form-create {
        max-width: 600px;
        margin: auto;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .form-floating {
        position: relative;
        margin-bottom: 15px;
    }

    .form-floating input:focus,
    .form-floating input[type="file"]:focus {
        border-color: #fc81cd;
        box-shadow: 0 0 0 0.25rem rgba(252, 129, 205, 0.25);
    }

    .form-floating input,
    .form-floating input[type="file"] {
        border-radius: 0.25rem;
        padding: 10px;
    }

    .form-floating label {
        position: absolute;
        top: 10px;
        left: 10px;
        padding: 0 5px;
        transition: all 0.2s;
        color: #999;
        pointer-events: none;
        background-color: none;
    }

    .form-floating input:focus ~ label,
    .form-floating input:not(:placeholder-shown) ~ label {
        top: -15px;
        left: 10px;
        font-size: 12px;
        color: #fc81cd;
    }

    .form-group label {
        color: #555;
        margin-bottom: 5px;
    }

    .btn-success {
        background-color: #fc81cd;
        border-color: #fc81cd;
    }

    .btn-success:hover {
        background-color: #e170b6;
        border-color: #e170b6;
    }
</style>
