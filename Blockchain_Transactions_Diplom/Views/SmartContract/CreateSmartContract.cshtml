@using Blockchain_Transactions_Diplom.ViewModels;
@model SmartContractCreateViewModel
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);
    <form asp-controller="SmartContract" asp-action="CreateSmartContract" method="post" enctype="multipart/form-data">
        <!-- Ваши поля формы с правильными атрибутами asp-for и name -->
        <input asp-for="IdExercise" type="text" value="@Model.IdExercise" readonly hidden name="IdExercise">
        <input asp-for="UserId" type="text" value="@user.Id" readonly hidden name="UserId">
        <input asp-for="PublicKeyCreator" type="text" value="@user.Publickey" readonly hidden name="PublicKeyCreator">
        <div class="form-group">
            <label >Contract Value</label>
            <input type="number" class="form-control" placeholder="" required="" name="ContractValue" oninput="calculateCommission()">
        </div>
        <div class="form-group">
            <label asp-for="ContractValue">Commission (10%) Therefore the executor will receive</label>
            <input asp-for="ContractValue" name="CommissionValue" type="number" class="form-control" readonly>
        </div>
        <button class="w-100 btn btn-primary btn-lg" type="submit">Confirm!</button>
    </form>

}
@section Scripts {
    <script>
        function calculateCommission() {
            var contractValue = parseFloat(document.querySelector('input[name="ContractValue"]').value);
            var commissionValue = contractValue - contractValue * 0.10;

            document.querySelector('input[name="CommissionValue"]').value = commissionValue.toFixed(0);
        }
    </script>
}