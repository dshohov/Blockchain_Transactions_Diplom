
@using Blockchain_Transactions_Diplom.ViewModels;
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@model TransactionCreateViewModel;
@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);

    <form asp-controller="Coin" asp-action="CreateTransactionT" method="post" class="needs-validation" novalidate="">
        <!-- Ваши поля формы с правильными атрибутами asp-for и name -->
        <input asp-for="FromPublicKey" type="text"  class="form-control" placeholder="" required="" name="FromPublicKey">
        <input asp-for="FromPrivateKey" type="text" class="form-control" placeholder="" required="" name="FromPrivateKey">
        <input asp-for="ToPublicKey" type="text" class="form-control" placeholder="" required="" name="ToPublicKey">
        <label asp-for="Amount" for="Amount" class="form-label">Amount</label>
        <input asp-for="Amount" type="number" min="0" max="@user.Balance" oninput="checkAmount(this)" class="form-control" placeholder="" required="" name="Amount">
        <div class="invalid-feedback">
            Your balance is @user.Balance!!!
        </div>
        <button class="w-100 btn btn-primary btn-lg" type="submit">Confirm!</button>
    </form>
@*    <script>
        function checkAmount(input) {
            var maxAmount = parseFloat(input.getAttribute('max'));
            var value = parseFloat(input.value);

            if (value > maxAmount) {
                input.value = maxAmount; // Если введено значение больше максимального, устанавливаем максимальное значение
            }

            if (value < 0) {
                input.value = 0; // Если введено отрицательное значение, устанавливаем ноль
            }
        }
    </script>*@
}